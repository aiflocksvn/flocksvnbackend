# Generated by Django 4.0 on 2022-05-11 10:13

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        ('media_center', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('order', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True)),
                ('slug', models.SlugField(null=True)),
            ],
            options={
                'db_table': 'blog_category',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(unique=True)),
                ('excerpt', models.TextField()),
                ('raw_content', models.TextField()),
                ('content', models.TextField()),
                ('post_status', models.CharField(choices=[('publish', 'publish'), ('draft', 'draft')], max_length=100)),
                ('comment_status', models.CharField(choices=[('open', 'open'), ('close', 'close')], max_length=100)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('slug', models.SlugField(max_length=255, null=True, unique=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='authentication.systemuser')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='learning_board.blogcategory')),
                ('header_image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='media_center.media')),
            ],
            options={
                'db_table': 'learning_blogpost',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='BlogPostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent_comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='comment_reply', to='learning_board.blogpostcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blogpost_comments', to='learning_board.blogpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_blogpost_comments', to='authentication.systemuser')),
            ],
            options={
                'db_table': 'learning_blogpost_comment',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='FrequentlyAskedQuestionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('order', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True)),
                ('slug', models.SlugField(null=True)),
            ],
            options={
                'db_table': 'faq_category',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Podcast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('subtitle', models.TextField()),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('listen_on', models.JSONField()),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='authentication.systemuser')),
                ('header_image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='media_center.media')),
            ],
            options={
                'db_table': 'learning_Podcast',
            },
        ),
        migrations.CreateModel(
            name='FrequentlyAskedQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('raw_content', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='learning_board.frequentlyaskedquestioncategory')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='authentication.systemuser')),
            ],
            options={
                'db_table': 'faq_question',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('excerpt', models.TextField()),
                ('content', models.TextField()),
                ('raw_content', models.TextField()),
                ('execution_date_start', models.DateTimeField(null=True)),
                ('execution_date_end', models.DateTimeField(null=True)),
                ('location', models.TextField()),
                ('header_image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_header_photo', to='media_center.media')),
            ],
            options={
                'db_table': 'learning_event',
            },
        ),
        migrations.CreateModel(
            name='BlogPostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like', models.IntegerField(validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blogpost_likes', to='learning_board.blogpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_blogpost_likes', to='authentication.systemuser')),
            ],
            options={
                'db_table': 'learning_blogpost_like',
            },
        ),
        migrations.CreateModel(
            name='BlogPostCommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like', models.IntegerField(validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blogpost_comment_likes', to='learning_board.blogpostcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_blogpost_comment_likes', to='authentication.systemuser')),
            ],
            options={
                'db_table': 'learning_blogpost_comment_like',
            },
        ),
        migrations.AddConstraint(
            model_name='blogcategory',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='category_name_unique'),
        ),
    ]
